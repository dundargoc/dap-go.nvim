================================================================================
                                                                *dap-go.nvim*

dap-go.nvim os an extension for nvim-dap to configurate Go with Delve debugger.

Getting started with dap-go:
  1. Run `:checkhealth dap-go` to make sure everything is installed.
  2. Put a `require("dap-go").setup()` call somewhere in your neovim config.
  3. Read |dap-go.setup| to check what config keys are available and what
     you can put inside the setup call
  4. Run `:lua require('nvim-dap').run()`

To find out more:
https://github.com/yriveiro/dap-go.nvim

  :h dap-go.setup

da-go.setup({opts})                                           *da-go.setup()*
    Setup function to be run by user. Configures the defaults of dap-go. For

    Usage:
    >
    require('dap-go').setup{
      extenal_config = {
        -- Default configuration for dap-go goes here:
        -- config_key = value,
        -- ..
      },
      dap = {
        -- Default configuration for dap configuration goes here:
        -- configurations = {
        --   {
        --     type = 'go',
        --     name = 'Debug',
        --     request = 'launch',
        --     program = '${file}',
        --   },
        -- }
      },
    }
    <


    Valid keys for {opts}

                                      *dap-go.external_config*
    external_config: ~
        Determinates the behavior of the external config feature.

        Fields:
          - enabled: Toogle to enable disable the feature.
                     default: false.
          - path:    The file path of the external config file.
                     default: `require('dap-go.util').git_root(vim.loop.fs_realpath('.')) .. 'dap-go.json'`


                                      *dap-go.dap*
    dap: ~
        Determines the configuration to be used on `nvim-dap` module. If the
        |dap-go.external_config| is enabled, It will containg the default entries
        plus the loaded from the external config.

        Fields:
          - configurations: List with the dap configurations.

            Default: {
              {
                type = 'go',
                name = 'Debug',
                request = 'launch',
                program = '${file}',
              },
              {
                type = 'go',
                name = 'Attach',
                mode = 'local',
                request = 'attach',
                processId = require('dap.utils').pick_process,
              },
            }


================================================================================
                                                            *dap-go.arguments*

In some cases we need to inject arguments and parameters to the DAP process. In
the case of Go using Delve debugger, if we use the dap mode, the process will
ignore arguments and flags.

>
  $:> dlv dap -l 127.0.0.1:38697 main.go -- -foo=bar

  Warning: debug arguments ignored with dap; specify via launch/attach request instead
  Warning: program flags ignored with dap; specify via launch/attach request instead
  DAP server listening at: 127.0.0.1:38697
<

The correct way to send arguments for our entry point is:

>
  {
  ...
  dap = {
    configurations = {
      {
        type = 'go',
        name = 'Debug with arguments',
        request = 'launch',
        program = '${file}',
        args = {
          '-foo',
          'var'
        },
      },
    },
  },
<

================================================================================
                                                            *dap-go.environment*

If we need to inject environment variables to our debugger, we will need to add
the following configuration.

This extension use plenary.nvim to handle the spawn of the Delve process. Plenary
ensures the correct down stream format of the environment variables to the
underling `vim.loop.spawn` function.

This extension also ensures the current environment is downstream to the
plenary.nvim Job as `libuv` cleans the entire environment if you set custom
environment variables, more info on https://github.com/nvim-lua/plenary.nvim/issues/249

>
  {
  ...
  dap = {
    configurations = {
      {
        'type': 'go',
        'name': 'Debug with environment variables',
        'request': 'launch',
        'program': '${file}',
        'options': {
          'env': {
            'FOO': 'bar',
          }
        }
      },
    },
  },
<

 vim:tw=78:ts=8:ft=help:norl:
